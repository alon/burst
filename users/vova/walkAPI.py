"""
Contains Locomotion class, see specific docstrings for more
"""
import math

####
# Add later our lib, now take something that works already.
# from burst import *

from motion_CurrentConfig import *

class Locomotion:
    """BURST class Locomotion - generates and manages walking commands
    this class manages all the walking commands generated by upper behaviors"""

    def __init__ (self,local_ip,local_port):
        """ Constructor - creating:
            main Broker
            motion proxy
            AlMemory proxy
            (ip & port provided from outside)
        """
        try:
          self.broker = ALBroker("pythonBroker",local_ip,local_port,IP, PORT)

        except RuntimeError,e:
          print("cannot connect to main broker")
          exit(1)

        try:
            self.motionProxy = ALProxy("ALMotion")

        except Exception,e:
          print "Error when creating motion proxy:"
          print str(e)
          exit(1)

        try:
            self.memoryProxy = ALProxy("ALMemory")

        except Exception,e:
          print "Error when creating motion proxy:"
          print str(e)
          exit(1)


    def testWalk(self):
        """
        Simple debug function, just to see that AlMotion & ALMemory are OK
        Ignore it
        """
        print "Are we here?"
        self.motionProxy.setSupportMode(motion.SUPPORT_MODE_DOUBLE_LEFT)


        # ShoulderMedian, ShoulderAmplitude, ElbowMedian, ElbowAmplitude
        self.motionProxy.setWalkArmsConfig( 100.0 * motion.TO_RAD, 10.0 * motion.TO_RAD, 30.0 * motion.TO_RAD, 10.0 * motion.TO_RAD )
        self.motionProxy.setWalkArmsEnable(True)

        #################
        ## Slow Walk With High Step
        #################

        # LHipRoll(degrees), RHipRoll(degrees), HipHeight(meters), TorsoYOrientation(degrees)
        self.motionProxy.setWalkExtraConfig( 4.5, -4.5, 0.22, 2.0 )

        # StepLength, StepHeight, StepSide, MaxTurn, ZmpOffsetX, ZmpOffsetY
        self.motionProxy.setWalkConfig( 0.05, 0.04, 0.04, 0.4, 0.01, 0.00 )

        self.motionProxy.addWalkStraight( 0.05*4, 80)
        #motionProxy.addTurn( 0.4*4, 80 )
        #motionProxy.addWalkSideways(-0.04*4, 80)
        self.motionProxy.walk()   #Blocking Function
        getYaw= self.memoryProxy.getData("Burst/Odometry/Yaw",0)
        print "Yaw: " + str(getYaw)

    def goToLocation(self,targetX,targetY,targetYaw):
        """
        Heart of the class
        will:
        * perform optimal motion planning
        * put orders on queue
        * check Odometry values while executing (???)

        now:
        * running dummy function that performs no smart planning whatsoever, nor Odoemtry readings
        """
        self.goToLocationNoOdometryNoPlanning(targetX,targetY,targetYaw)


    def goToLocationNoOdometryNoPlanning(self,targetX,targetY,targetYaw):
        """
        Turns, walk straight, turns
        """
        #get current coordinates from Odometry
        x=self.memoryProxy.getData("Burst/Odometry/X",0)
        y=self.memoryProxy.getData("Burst/Odometry/Y",0)
        yaw= self.memoryProxy.getData("Burst/Odometry/Yaw",0)
        #Calculate the angle for the first turn
        beta=math.atan2(math.fabs(x-targetX),math.fabs(y-targetY))
        alpha1=beta-yaw
        #Calculate the distance to walk
        dist=math.sqrt(math.pow((y-targetY),2) + math.pow((x-targetX),2))
        #Calculate the angle for the second turn
        alpha2=targetYaw-beta

        #Config, Dunno about those parameters on this stage copy/pasted from motion_Walk
        self.motionProxy.setSupportMode(motion.SUPPORT_MODE_DOUBLE_LEFT)
        # ShoulderMedian, ShoulderAmplitude, ElbowMedian, ElbowAmplitude
        self.motionProxy.setWalkArmsConfig( 100.0 * motion.TO_RAD, 10.0 * motion.TO_RAD, 30.0 * motion.TO_RAD, 10.0 * motion.TO_RAD )
        self.motionProxy.setWalkArmsEnable(True)
        # LHipRoll(degrees), RHipRoll(degrees), HipHeight(meters), TorsoYOrientation(degrees)
        self.motionProxy.setWalkExtraConfig( 3.5, -3.5, 0.22, 2.0 )
        # StepLength, StepHeight, StepSide, MaxTurn, ZmpOffsetX, ZmpOffsetY
        self.motionProxy.setWalkConfig( 0.05, 0.04, 0.04, 0.4, 0.01, 0.00 )

        #Turn 1
        self.motionProxy.addTurn( alpha1, 80 )
        print "alpha1: "+ str(alpha1)
        #Walk
        self.motionProxy.addWalkStraight( dist, 80 )
        print "dist: "+ str(dist)
        #Turn 2
        self.motionProxy.addTurn( alpha2, 80 )
        print "alpha2: "+ str(alpha2)
        #do walking
        self.motionProxy.walk()

    def __del__(self):
        """
        Destructor - performing cleanup
        """
        broker.shutdown()
        print "Walk API broker destroyed"





