#!/usr/bin/python
import sys, os
import optparse
import urllib2

# add path of burst library
burst_lib = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(sys.argv[0])), '../lib'))
sys.path.append(burst_lib)
import pynaoqi

# we use twisted in a thread if requested
options = pynaoqi.getDefaultOptions()

if options.twisted:
    from ipy import IPShellTwisted
    shellclass = lambda ns: IPShellTwisted(argv=[], user_ns=ns)
    getrealshell = lambda shell: shell.IP
else:
    import IPython.ipapi
    shellclass = IPython.ipapi.launch_new_instance
    getrealshell = lambda x: x

# parse command line arguments
try:
    con = pynaoqi.getDefaultConnection()
except urllib2.URLError, e:
    print "error connecting: %s" % e
    raise SystemExit

if con.options.video:
    sys.argv.append('-gthread')
    con.retrieveImages()

# start ipython shell

my_ns = dict(
    con = con,
    pynaoqi = pynaoqi)

print "<"*30 + "o"*20 + ">"*30
print """Pynaoqi shell - con object holds all the modules, methods, help!
Deferreds: Any operation returning a deferred will return immediately
as expected, and additionally once its callback is called it will be
printed and available as _d."""
print "_"*80
shell = shellclass(my_ns)
realshell = getrealshell(shell)

# set a nicer prompt to tell the user where he is connected to
# reminder: can use ${} to eval stuff, like: '${con.host} [\#]: '
realshell.outputcache.prompt1.p_template='%s [\#]: ' % (con.host)

# If in twisted, start the mainloop, and add a hook to display deferred results
# when they are available (also affects *any* deferred you try to print)
if options.twisted:
    import twisted.internet.defer as defer
    from IPython.hooks import result_display
    from IPython.genutils import Term

    def pr(x):
        print >>Term.cout, "deferred: %s" % x
        shell.IP.user_ns['_d'] = x
        return x

    def display_defer(self, arg):
        # don't display already called deferreds?
        if isinstance(arg, defer.Deferred):
            arg.addCallback(pr)
        else:
            result_display(self, arg)
    shell.IP.set_hook('result_display', display_defer)
    shell.mainloop()

